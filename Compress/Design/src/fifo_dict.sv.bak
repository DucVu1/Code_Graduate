module fifo_dict #(
    parameter DATA_WIDTH = 32,         // 32-bit per word
    parameter WORDS_PER_ENTRY = 16     // 16 words per entry (512 bits total)
)(
    input  logic                                  i_clk,
    input  logic                                  i_reset,
    input  logic                                  wr,      // Write enable for port 1
    input  logic                                  wr2,     // Write enable for port 2
    input  logic [DATA_WIDTH-1:0]                 w_data,  // 32-bit input data for port 1
    input  logic [DATA_WIDTH-1:0]                 w_data2, // 32-bit input data for port 2
    output logic [WORDS_PER_ENTRY*DATA_WIDTH-1:0] r_data, // 512-bit (64B) output
    output logic                                  full     // Indicates a full entry is written
);
    logic [$clog2(WORDS_PER_ENTRY)-1:0] word_index;
    logic [$clog2(WORDS_PER_ENTRY)-1:0] word_index2;
    
    assign full = (wr && wr2) ? (word_index == (WORDS_PER_ENTRY - 2))
                              : (word_index == (WORDS_PER_ENTRY - 1));
    
    // Update word_index on each clock.
    always_ff @(posedge i_clk or posedge i_reset) begin
        if (i_reset)
            word_index <= 0;
        else if (wr && wr2) begin
            // Write two words
            if (word_index <= WORDS_PER_ENTRY - 2)
                word_index <= word_index + 2;
            else
                word_index <= 0; // Wrap-around if at end.
        end else if (wr) begin
            // Single write
            if (word_index < WORDS_PER_ENTRY - 1)
                word_index <= word_index + 1;
            else
                word_index <= 0;
        end
    end

    // Compute word_index2 as (word_index + 1) mod WORDS_PER_ENTRY.
    always_comb begin
        if (word_index == WORDS_PER_ENTRY - 1)
            word_index2 = 0;
        else
            word_index2 = word_index + 1;
    end

    reg_file_single_dp #(
        .DATA_WIDTH(DATA_WIDTH),
        .WORDS_PER_ENTRY(WORDS_PER_ENTRY)
    ) reg_file_inst (
        .clk(i_clk),
        .w_en(wr),
        .w_en2(wr2),
        .word_index(word_index),
        .word_index2(word_index2),
        .w_data(w_data),
        .w_data2(w_data2),
        .r_data(r_data)
    );
    
endmodule
