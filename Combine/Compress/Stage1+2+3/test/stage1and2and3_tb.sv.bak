`timescale 1ns/1ps

module stage1and2and3_tb;

  parameter WIDTH = 64;
  parameter CACHE_LINE = 128;
  parameter DATA_WIDTH = 32;
  parameter DICT_ENTRY = 16;
  parameter COMPRESSED = 34;
  parameter TOTAL_BITS = 34;

  logic i_clk;
  logic i_reset;
  logic [WIDTH - 1:0] i_word;
  logic [CACHE_LINE - 1:0] o_mux_array2;
  int dict_index = 0;
  logic [DICT_ENTRY-1:0][DATA_WIDTH-1:0] dict_mem;
  logic stop_flag, i_output_flag;
  logic [127:0] o_mux_array3;
  logic [127:0] o_reg_array2;
  logic [127:0] o_mux_array1;
  logic [COMPRESSED - 1 :0] compressed1, compressed2;

  // Internal dictionary
  logic [511:0] dictionary_data;

  // Instantiate DUT
  stage1and2and3 dut (
    .i_clk(i_clk),
    .i_reset(i_reset),
    .i_word(i_word),
    .o_mux_array2(o_mux_array2),
    .dictionary_data(dictionary_data)
  );

assign stop_flag = dut.o_stop_flag;
assign o_mux_array3 = dut.stage3.o_mux_array3;
assign o_reg_array2 = dut.stage3.o_reg_array2;
assign o_mux_array1 = dut.stage3.o_mux_array1;
assign i_output_flag = dut.stage3.i_output_flag;
assign compressed1 =  dut.stage3.o_compressed_word1;
assign compressed2 =  dut.stage3.o_compressed_word2;

 task update_fifo_dictionary(input logic [DATA_WIDTH-1:0] word);
    begin
      dict_mem[dict_index] = word;
      $display("[FIFO Update] New word %h inserted at index %0d", word, dict_index);
      dict_index = (dict_index + 1) % DICT_ENTRY;
    end
  endtask

  task preload_word(input logic [DATA_WIDTH-1:0] word0, input logic [DATA_WIDTH-1:0] word1);
    begin
      i_word <= {word1, word0}; // Lower word is word0, upper word is word1
      dict_mem[dict_index]   = word0;
      dict_mem[dict_index+1] = word1;
      dict_index += 2;
      #10; // Wait one clock cycle for the dictionary to update.
    end
  endtask

 task init_dictionary();
    begin
      preload_word(32'hAABBCCDD, 32'h11223344); // dictionary words 0 & 1
      preload_word(32'h55667788, 32'h99AABBCC); // words 2 & 3
      preload_word(32'hDDEEFF00, 32'h12345678); // words 4 & 5
      preload_word(32'h9ABCDEF0, 32'h0F0E0D0C); // words 6 & 7
      preload_word(32'h87654321, 32'hFEDCBA98); // words 8 & 9
      preload_word(32'h00112233, 32'h44556677); // words 10 & 11
      preload_word(32'h8899AABB, 32'hCCDDEEFF); // words 12 & 13
      preload_word(32'h10203040, 32'h50607080); // words 14 & 15
      $display("Dictionary preloaded.");
    end
  endtask
  
task check_pattern(input [31:0] first_word, input [31:0] second_word, 
                     output logic [6:0] exp_length1, output logic [6:0] exp_length2,
                     output logic [2:0] exp_code1, output logic [2:0] exp_code2,
                     output logic [3:0] dict_idx1, output logic [3:0] dict_idx2);
    integer j;
    logic found1, found2;
    
    // Check first word
    found1 = 0;
    dict_idx1 = 4'b1111; // Default invalid index
    if (first_word == 32'd0) begin // zzzz
        exp_length1 = 7'd2;
        exp_code1   = 3'b000;
    end else if (first_word[31:8] == 24'd0) begin
        exp_length1 = 7'd12;
        exp_code1   = 3'b010;
    end else begin
        for (j = 0; j < DICT_ENTRY; j = j + 1) begin
            if (dict_mem[j] == first_word) begin // mmmm
                found1 = 1;
                exp_length1 = 7'd6;
                exp_code1   = 3'b001;
                dict_idx1   = j;
                break;
            end else if (dict_mem[j][31:8] == first_word[31:8]) begin  // mmmx
                exp_length1 = 7'd16;
                exp_code1   = 3'b011;
                dict_idx1   = j;
                found1 = 1;
            end else if (dict_mem[j][31:16] == first_word[31:16]) begin // mmxx
                exp_length1 = 7'd24;
                exp_code1   = 3'b100;
                dict_idx1   = j;
                found1 = 1;
            end
        end
        if (!found1) begin
            exp_length1 = 7'd34;
            exp_code1   = 3'b101;
            update_fifo_dictionary(first_word);
        end
    end
    
    // Check second word
    found2 = 0;
    dict_idx2 = 4'b1111;
    if (second_word == 32'd0) begin
        exp_length2 = 7'd2;
        exp_code2   = 3'b000;
    end else if (second_word[31:8] == 24'd0) begin
        exp_length2 = 7'd12;
        exp_code2   = 3'b010;
    end else begin
        for (j = 0; j < DICT_ENTRY; j = j + 1) begin
            if (dict_mem[j] == second_word) begin // mmmm
                found2 = 1;
                exp_length2 = 7'd6;
                exp_code2   = 3'b001;
                dict_idx2   = j;
                break;
            end else if (dict_mem[j][31:8] == second_word[31:8]) begin  // mmmx
                exp_length2 = 7'd16;
                exp_code2   = 3'b011;
                dict_idx2   = j;
                found2 = 1;
            end else if (dict_mem[j][31:16] == second_word[31:16]) begin // mmxx
                exp_length2 = 7'd24;
                exp_code2   = 3'b100;
                dict_idx2   = j;
                found2 = 1;
            end
        end
        if (!found2) begin
            exp_length2 = 7'd34;
            exp_code2   = 3'b101;
            update_fifo_dictionary(second_word);
        end
    end
endtask

task generate_prediction(input logic [31:0] i_word, input logic [2:0] i_code, input logic [3:0] i_dict_idx, output logic [127:0] temp);
  begin
    case (i_code)
      3'b000: temp = 32'd0; // zzzz
      3'b001: temp = {{(TOTAL_BITS-6){1'b0}}, 2'b10, i_dict_idx}; // mmmm
      3'b010: temp = {{(TOTAL_BITS-12){1'b0}}, 4'b1101, i_word[7:0]}; // zzzx
      3'b011: temp = {{(TOTAL_BITS-16){1'b0}}, 4'b1110, i_dict_idx, i_word[7:0]}; // mmmx
      3'b100: temp = {{(TOTAL_BITS-24){1'b0}}, 4'b1100, i_dict_idx, i_word[15:0]}; // mmxx
      3'b101: temp = {2'b01, i_word}; // xxxx
      default: temp = {32{1'b1}};
    endcase
  end
endtask

task predict_compressed_word();
  logic [6:0] exp_length1, exp_length2;
  logic [2:0] exp_code1, exp_code2;
  logic [3:0] dict_idx1, dict_idx2;
  logic [33:0] expected_compressed_word;
  begin
    check_pattern(i_word[31:0], i_word[63:32], exp_length1, exp_length2, exp_code1, exp_code2, dict_idx1, dict_idx2);
    generate_prediction(i_word[31:0], exp_code1, dict_idx1, expected_compressed_word);
    $display("[Prediction] Expected Compressed Word1: %h", expected_compressed_word);
    if (expected_compressed_word == compressed1) $display("PASS");
    else $display("FAIL: Inital word: %h, expected_compressed_word: %h, actual: %h",i_word[31:0], expected_compressed_word, compressed1);
    generate_prediction(i_word[63:32], exp_code2, dict_idx2, expected_compressed_word);
    $display("[Prediction] Expected Compressed Word2: %h", expected_compressed_word);
    if (expected_compressed_word == compressed2) $display("PASS");
    else $display("FAIL: Inital word: %h, expected_compressed_word2: %h, actual: %h",i_word[63:32],  expected_compressed_word, compressed2);
  end
endtask

  // Clock generation
  always #5 i_clk = ~i_clk;


  // Test procedure
  initial begin
    i_clk = 0;
    i_reset = 0;
    i_word = 0;
    
    // Apply reset
    #10 i_reset = 1;

    // Initialize dictionary
    init_dictionary();
    #20
  // Test Case 1: zzzz (All Zero)
    i_word <= {32'h00000000, 32'h00000000};
    predict_compressed_word();
    #20;

    // Test Case 2: mmmm (All Matched)
    i_word <= {32'hAABBCCDD, 32'h11223344}; // Already in dictionary
    predict_compressed_word();
    #20;

    // Test Case 3: zzzx (Single Byte Difference)
    i_word <= {32'h00000012, 32'h000000AB};
    predict_compressed_word();
    #20;

    // Test Case 4: mmmx (Three Byte Match)
    i_word <= {32'hAABBCC12, 32'h11223399}; // Matches first 3 bytes in dictionary
    predict_compressed_word();
    #20;

    // Test Case 5: mmxx (Two Byte Match)
    i_word <= {32'hAABB0012, 32'h11220099}; // Matches first 2 bytes in dictionary
    predict_compressed_word();
    #20;

    // Test Case 6: xxxx (Unmatched Word)
    i_word <= {32'hFACEB00C, 32'hDEADBEEF}; // Completely new words
    predict_compressed_word();
    #20;

    // Test Case 7: Alternating Patterns
    i_word <= {32'h00000000, 32'h11223344}; // zzzz and mmmm
    predict_compressed_word();
    #20;

    i_word <= {32'h000000AA, 32'h55667788}; // zzzx and mmmm
    predict_compressed_word();
    #20;

    i_word <= {32'hAABBCCDD, 32'h00000000}; // mmmm and zzzz
    predict_compressed_word();
    #20;

    // Test Case 8: Dictionary Updates
    i_word <= {32'hAAAABBBB, 32'hCCCCDDDD}; // New entries
    predict_compressed_word();
    #20;
    
    i_word <= {32'hEEEFFFFF, 32'h12345678}; // One new, one existing
    predict_compressed_word();
    #20;

    // Test Case 9: Edge Cases (Minimum and Maximum Values)
    i_word <= {32'hFFFFFFFF, 32'h00000000}; // Max and Min values
    predict_compressed_word();
    #20;

    i_word <= {32'h80000000, 32'h7FFFFFFF}; // Min Signed and Max Signed
    predict_compressed_word();
    #20;

  // Finish simulation
  #20 $finish;
  end

endmodule
